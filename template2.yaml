apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  # unique name per namespace for the template
  name: do-goldenpath-spring-boot-rest-api-template2-testing
  # title of the template
  title: Golden Path Spring Boot REST API Template 2 - testing
  # a description of the template
  description: Just for testing purposes
  # some tags to display in the frontend
  tags:
    - api
    - goldenpath
    - java
    - rest
spec:
  owner: devops
  type: microservice
  # if the template is not in the current directory where this definition is kept then specify

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Choose Bitbucket Project
      required:
        - org
        - project
      properties:
        org:
          title: Organization
          type: string
          description: Bitbucket organization workspace
          oneOf:
            - const: "twgnz"
              title: "TWGNZ - The Warehouse Group"
        project:
          title: Project
          type: string
          description: Bitbucket project name
          ui:autofocus: true
          oneOf:
            - const: "AI"
              title: "AI - Analytics and Insights"
            - const: "B2B"
              title: "B2B - Salesforce B2B project"
            - const: "DATA"
              title: "DATA - Data Structure and Information"
            - const: "DE"
              title: "DE - Salesforce Commerce Cloud (Demandware)"
            - const: "DO"
              title: "DO - Devops"
            - const: "ERPFI"
              title: "ERPFI - Enterprise Resource Planning Financials"
            - const: "ESB"
              title: "ESB - Enterprise Service Bus"
            - const: "FF"
              title: "FF - Fulfillment"
            - const: "GEP"
              title: "GEP - Salesforce Group eCommerce Platform"
            - const: "IHUB"
              title: "IHUB - Integration Hub"
            - const: "IN"
              title: "IN - In-house apps"
            - const: "INTEG"
              title: "INTEG - Integration"
            - const: "IS"
              title: "IS - Infrastructure"
            - const: "ISOC"
              title: "ISOC - IS Operations cloud Squad"
            - const: "LOYAL"
              title: "LOYAL - Loyalty"
            - const: "LPA"
              title: "LPA - Loyalty, Payment and Advisory"
            - const: "MDM"
              title: "MDM - Master Data Management"
            - const: "MER"
              title: "MER - Merch"
            - const: "MOB"
              title: "MOB - TWL & NL App"
            - const: "QA"
              title: "QA"
            - const: "SS"
              title: "SS - Store Services"
            - const: "WMS"
              title: "WMS"
    - title: Provide Component Details
      required:
        - name
        - description
      properties:
        name:
          title: Unique name of the component
          type: string
          ui:field: ComponentDetailsNameExtension
          ui:autofocus: true
        description:
          title: Description for the component
          type: string

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: "Fetch Base"
      action: fetch:cookiecutter
      input:
        url: ./template
        copyWithoutRender:
          - '*.tpl.md'
        values:
          component_id: '{{ parameters.name }}'
          organization_id: '{{ parameters.org }}'
          project: '{{ parameters.project }}'
          description: '{{ parameters.description }}'
          # use the \ to escape the cookiecutter expressions as the conflict with handlebar expressions
          prefix: '\{{ cookiecutter.project|lower }}'
          owner: '\{{ cookiecutter.project|lower }}-team'
          artifact_id: '\{{ cookiecutter.component_id }}'
          java_package_name: '\{{ cookiecutter.component_id|replace("-", "") }}'
          http_port: 8080

    - id: publish
      name: "Publish"
      action: publish:file
      input:
        path: /tmp/backstage/{{ parameters.name }}

    - id: bitbucket-webhooks
      name: "BitBucket Webhooks"
      action: publish:bitbucket-webhooks:twgnz-custom
      input:
        org: '{{ parameters.org }}'
        repo: '{{ parameters.name }}'

    - id: sonarcloud
      name: "SonarCloud Code Analysis"
      action: publish:sonarcloud:twgnz-custom
      input:
        org: '{{ parameters.org }}'
        repo: '{{ parameters.name }}'

    - id: pipeline-jenkins
      name: "Pipeline: Jenkins"
      action: publish:jenkins:twgnz-custom
      input:
        project: '{{ parameters.project }}'
        repo: '{{ parameters.name }}'

    - id: register
      name: "Register"
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: '{{ steps.publish.output.remoteUrl }}'
    entityRef: '{{ steps.register.output.entityRef }}'
