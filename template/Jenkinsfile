#!groovy

@Library('do-jenkins-shared-libraries@master')

// service details
def serviceName = '{{cookiecutter.artifact_id}}'

def harnessTriggerPayload = """
application: "oqjOVQTnRYyCFzCq7V1egQ"
parameters:
  service: {{cookiecutter.artifact_id}}
  service_type: rest
  chart_version: 0.1.22
  dev_infra: aks-dev
  dev_namespace: {{cookiecutter.prefix}}-dev
  test_infra: aks-test
  test_namespace: {{cookiecutter.prefix}}-test
  prod_infra: aks-prod
  prod_namespace: {{cookiecutter.prefix}}-prod
  product_name: {{cookiecutter.prefix}}
  elasticsearch_index: "*__{{cookiecutter.prefix}}*__log_*"
  build_number: BUILD_VERSION
  app_commit_id: APP_COMMIT_ID
  deploy_commit_id: DEPLOY_COMMIT_ID
  artifact_base_url: ARTIFACT_BASE_URL
  user_group: ".TWG Okta Harness Admin,.TWG Product {{cookiecutter.prefix}} team"
"""

def docker_registry_url = 'https://index.docker.io/v1/'
def docker_registry_cred_id = 'f0df4430-f37f-4133-9746-8eb07fcf2165'

def kubernetes_prepare_deploy_agent = '''
spec:
  containers:
  - name: curl
    image: twgorg/ff-build:latest
    command:
    - cat
    tty: true
  - name: changelog
    image:  quay.io/git-chglog/git-chglog
    command:
    - cat
    tty: true
  imagePullSecrets:
  - name: regsecret
'''

pipeline {
    agent none

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '20'))
        skipStagesAfterUnstable()
        timeout time: 30, unit: 'MINUTES'
    }

    environment {
        NEXUS_CREDS = credentials('do-nexus-credentials')
        NEXUS_REPO_BASE_URL_ARTIFACTS = 'https://nexus-dev-aws.twg.co.nz/repository/components'
        HARNESS_WEBHOOK_URL = 'https://app.harness.io/gateway/api/webhooks/qStpqftzykZP5FOKGEt1pwNhSVjOwQ233JbdBrxU?accountId=hOGfjDXdRbeM1IHvM1to9Q'
        CHANGELOG_FILENAME = './CHANGELOG.md'
    }
    stages {
        stage('Build') {
            when {
                beforeOptions true
                beforeAgent true
                not {
                    expression { return params.DEPLOY_TO_PROD }
                }
            }
            agent {
                label 'build-agent'
            }
            environment {
                SONAR_TOKEN = credentials('do-sonarcloud-token')
            }
            steps {
                script {
                    def sonarOpts = ""
                    def sonarProfile = "sonar"
                    if (env.CHANGE_ID != null) {
                        // if the build is triggered by a PR build, use the CHANGE_BRANCH env var
                        sonarOpts = "-Dsonar.branch.name='${env.CHANGE_BRANCH}'"
                    } else if (env.BRANCH_NAME != null) {
                        // if the build is triggered by a regular build
                        sonarOpts = "-Dsonar.branch.name='${env.BRANCH_NAME}'"
                    } else {
                        // disable the sonar profile otherwise
                        sonarProfile = ""
                    }

                    withDockerRegistry([credentialsId: docker_registry_cred_id, url: '']) {
                        docker.image('maven:3.8-openjdk-11').inside(
                            '-v /var/run/docker.sock:/var/run/docker.sock ' +
                            '-v /home/ec2-user/m2cache:/root/.m2 ' +
                            '-v /home/ec2-user/.kube:/root/.kube ' +
                            '-v /home/ec2-user/.sonar:/root/.sonar ' +
                            '--network host') {
                            echo "appversion is ${env.GIT_COMMIT}."
                            sh "KUBECONFIG=/root/.kube/config mvn ${sonarOpts} -Drevision=${env.GIT_COMMIT} clean verify -P jkube,dependencyCheck,${sonarProfile} -s ./settings.xml"
                        }
                        if ("${env.BRANCH_NAME}" == 'master') {
                            print 'Pushing docker image for master branch'
                            sh "docker push twgorg/${serviceName}:${env.GIT_COMMIT}"
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        setBuildDetails(env.BUILD_NUMBER, env.GIT_COMMIT, 'DEFAULT')
                        uploadArtifactsToNexus(env.NEXUS_REPO_BASE_URL_ARTIFACTS, env.JOB_NAME, env.BUILD_NUMBER) // NEXUS_CRED env variable is expected too
                    }
                }
            }
        }

        stage('Prepare Deployment') {
            when {
                beforeOptions true
                beforeAgent true
                expression { BRANCH_NAME == 'master' }
            }
            agent {
                kubernetes {
                    yaml kubernetes_prepare_deploy_agent
                    inheritFrom 'k8s-docker-image-build-template'
                    yamlMergeStrategy merge()
                }
            }
            steps {
                container('changelog') {
                    script {
                        echo "Creating change log"
                        sh 'git-chglog --next-tag "Unreleased" --output ${CHANGELOG_FILENAME}'

                        echo "Change log generated..."
                        sh 'cat ${CHANGELOG_FILENAME}'
                    }
                }
                container('curl') {
                    script {
                        sh """
                            curl --silent --show-error --include --fail \
                                --user \"\${NEXUS_CREDS}\" \
                                --upload-file "\${CHANGELOG_FILENAME}" \
                                "${NEXUS_REPO_BASE_URL_ARTIFACTS}/${JOB_NAME}/${BUILD_NUMBER}/"
                        """
                    }
                }
            }
            post {
                always {
                    script {
                        setBuildDetails(env.BUILD_NUMBER, env.GIT_COMMIT, 'DEFAULT')
                    }
                }
            }
        }
        stage('Trigger Deployment') {
            when {
                beforeOptions true
                beforeAgent true
                expression { env.BRANCH_NAME == 'master' }
            }
            agent {
                kubernetes {
                    yaml kubernetes_prepare_deploy_agent
                    inheritFrom 'k8s-docker-image-build-template'
                    yamlMergeStrategy merge()
                }
            }
            steps {
                container('curl') {
                    script {

                        // deployment info for the harness payload
                        harnessPayload = readYaml text: harnessTriggerPayload
                        harnessPayload.parameters.build_number = "${env.BUILD_NUMBER}"
                        harnessPayload.parameters.app_commit_id = "${env.GIT_COMMIT}"
                        harnessPayload.parameters.deploy_commit_id = "${env.GIT_COMMIT}"
                        harnessPayload.parameters.artifact_base_url = "$NEXUS_REPO_BASE_URL_ARTIFACTS/$JOB_NAME/$BUILD_NUMBER"
                        String harnessPayloadJson = writeJSON file: 'harness-payload.json', json: harnessPayload

                        sh 'echo About to trigger harness...'
                        sh 'cat harness-payload.json'
                        sh "curl --silent --show-error --include --fail -X POST -H 'content-type: application/json' --url $HARNESS_WEBHOOK_URL -d '@harness-payload.json'"

                    }
                }
            }
            post {
                always {
                    script {
                        setBuildDetails(env.BUILD_NUMBER, env.GIT_COMMIT, 'DEFAULT')
                    }
                }
            }

        }
    }
}
