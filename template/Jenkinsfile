#!groovy

@Library('do-jenkins-shared-libraries@master')

import nz.co.twg.jenkins.snyk.SnykConstants

// service details
def serviceName = '{{cookiecutter.artifact_id}}'

def harnessTriggerPayload = """
application: "oqjOVQTnRYyCFzCq7V1egQ"
parameters:
  service: {{cookiecutter.artifact_id}}
  service_type: rest
  chart_version: 0.1.22
  dev_infra: aks-dev
  dev_namespace: {{cookiecutter.prefix}}-dev
  test_infra: aks-test
  test_namespace: {{cookiecutter.prefix}}-test
  prod_infra: aks-prod
  prod_namespace: {{cookiecutter.prefix}}-prod
  product_name: {{cookiecutter.prefix}}
  elasticsearch_index: "*__{{cookiecutter.prefix}}*__log_*"
  build_number: BUILD_VERSION
  app_commit_id: APP_COMMIT_ID
  deploy_commit_id: DEPLOY_COMMIT_ID
  artifact_base_url: ARTIFACT_BASE_URL
  user_group: ".TWG Okta Harness Admin,.TWG Product {{cookiecutter.prefix}} team"
"""

def dockerRegistryCredId = 'f0df4430-f37f-4133-9746-8eb07fcf2165'

def snykEnabled = true
def snykTokenId = 'snyk_token'
def snykGroupId = 'e5cbe235-3135-4861-aa56-a9836b51511a'
def snykOrgName = '{{cookiecutter.prefix}}'
def snykFailOnActionNeeded = false

def mavenLocalRepoOpts = '-Dmaven.repo.local=/home/ec2-user/m2cache/repository'

pipeline {

    tools {
        snyk "snyk"
    }

    agent {
        label 'build-agent'
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '20'))
        skipStagesAfterUnstable()
        timeout time: 30, unit: 'MINUTES'
    }

    environment {
        NEXUS_CREDS = credentials('do-nexus-credentials')
        NEXUS_REPO_BASE_URL_ARTIFACTS = 'https://nexus-dev-aws.twg.co.nz/repository/components'
        HARNESS_WEBHOOK_URL = 'https://app.harness.io/gateway/api/webhooks/bjEExMNWyWrOD36SKRqhDcqMcKuH5pTvoc84ho3T?accountId=hOGfjDXdRbeM1IHvM1to9Q'
        CHANGELOG_FILENAME = './CHANGELOG.md'
        SNYK_HOME = tool name: 'snyk'
    }
    stages {
        stage('Snyk Dependency and Static Analysis Tests') {
            when {
                expression { snykEnabled == true }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: snykTokenId, variable: 'SNYK_TOKEN')]) {
                        String snykOrgSlug = snykGetOrgSlugByName(snykGroupId, snykOrgName)

                        // This Snyk CLI invocation will perform dependency checks on
                        // the project's definition that contains all of the dependencies.

                        snykTool(
                            'test',
                            "--org=${snykOrgSlug}  -- ${mavenLocalRepoOpts} -s ./settings.xml",
                            null, // context specific options
                            SnykConstants.OUTPUT_FILE,
                            snykFailOnActionNeeded)

                        // This Snyk CLI invocation will upload the source code for the
                        // application to Snyk and cause a static analysis scan of the
                        // material.

                        snykTool(
                            'code test',
                            "--org=${snykOrgSlug}",
                            null, // context specific options
                            SnykConstants.OUTPUT_FILE,
                            snykFailOnActionNeeded)
                    }
                }
            }
        }

        stage('Build') {
            environment {
                SONAR_TOKEN = credentials('do-sonarcloud-token')
            }
            steps {
                script {
                    // pre build kubernetes cleanup
                    sh "kubectl delete --all deployments,services,configmaps"

                    def sonarOpts = ""
                    def sonarProfile = "sonar"
                    if (env.CHANGE_ID != null) {
                        // if the build is triggered by a PR build, use the CHANGE_BRANCH env var
                        sonarOpts = "-Dsonar.branch.name='${env.CHANGE_BRANCH}'"
                    } else if (env.BRANCH_NAME != null) {
                        // if the build is triggered by a regular build
                        sonarOpts = "-Dsonar.branch.name='${env.BRANCH_NAME}'"
                    } else {
                        // disable the sonar profile otherwise
                        sonarProfile = ""
                    }

                    withDockerRegistry([credentialsId: dockerRegistryCredId, url: '']) {
                        echo "appversion is ${env.GIT_COMMIT}."
                        sh """KUBECONFIG=/home/ec2-user/.kube/config ./mvnw \
                            -U ${mavenLocalRepoOpts} -Dsnyk.skip ${sonarOpts} -Drevision=${env.GIT_COMMIT} \
                            clean verify -Pjkube,${sonarProfile} -s ./settings.xml"""

                        String imageTag = "twgorg/${serviceName}:${env.GIT_COMMIT}"

                        if (snykEnabled) {
                            withCredentials([string(credentialsId: snykTokenId, variable: 'SNYK_TOKEN')]) {
                                String snykOrgSlug = snykGetOrgSlugByName(snykGroupId, snykOrgName)

                                // This Snyk CLI invocation is scanning the newly created Docker
                                // image locally.

                                snykTool(
                                    "container test",
                                    "--org=${snykOrgSlug}",
                                    imageTag,
                                    SnykConstants.OUTPUT_FILE,
                                    snykFailOnActionNeeded)
                            }
                        } else {
                            print 'snyk disabled --> skipping snyk docker image analysis'
                        }

                        if ("${env.BRANCH_NAME}" == 'master') {
                            print 'Pushing docker image for master branch'
                            sh "docker push ${imageTag}"

                            if (snykEnabled) {
                                withCredentials([string(credentialsId: snykTokenId, variable: 'SNYK_TOKEN')]) {
                                    String snykOrgSlug = snykGetOrgSlugByName(snykGroupId, snykOrgName)

                                    // this Snyk CLI command will setup the Docker image for
                                    // on-going scanning (eg: 1x per day) in the Snyk system.
                                    // The output from this is not captured.

                                    snykTool(
                                        "container monitor",
                                        "--org=${snykOrgSlug} --project-tags=source=docker,team=${snykOrgName}",
                                        imageTag,
                                        null, // output file
                                        false // fail on action needed; has no actions so not required
                                    )

                                }
                            } else {
                                print 'snyk disabled --> skipping snyk docker image monitoring'
                            }

                            docker.image('quay.io/git-chglog/git-chglog:0.15.1').inside("--entrypoint ''") {
                                script {
                                    echo "Creating change log"
                                    sh "git-chglog --next-tag \"Unreleased\" --output ${CHANGELOG_FILENAME}"

                                    echo "Change log generated..."
                                    sh "cat ${CHANGELOG_FILENAME}"
                                }
                            }
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        // post build kubernetes cleanup
                        sh "kubectl delete --all deployments,services,configmaps"

                        if (fileExists(SnykConstants.OUTPUT_FILE)) {
                            plainTextFileToHtml(SnykConstants.OUTPUT_FILE, SnykConstants.OUTPUT_FILE_HTML)
                        }

                        setBuildDetails(env.BUILD_NUMBER, env.GIT_COMMIT, 'DEFAULT')
                        uploadArtifactsToNexus(env.NEXUS_REPO_BASE_URL_ARTIFACTS, env.JOB_NAME, env.BUILD_NUMBER) // NEXUS_CRED env variable is expected too
                        renderTestResultsLinks(env.NEXUS_REPO_BASE_URL_ARTIFACTS, env.JOB_NAME, env.BUILD_NUMBER)

                        sh "rm -f '${CHANGELOG_FILENAME}'"
                        sh "rm -f '${SnykConstants.OUTPUT_FILE}'"
                        sh "rm -f '${SnykConstants.OUTPUT_FILE_HTML}'"
                    }
                }
            }
        }

        stage('Trigger Deployment') {
            when {
                beforeOptions true
                beforeAgent true
                expression { env.BRANCH_NAME == 'master' }
            }
            steps {
                script {
                    withDockerRegistry([credentialsId: dockerRegistryCredId, url: '']) {
                        docker.image('curlimages/curl:7.81.0').inside {
                            script {
                                // deployment info for the harness payload
                                harnessPayload = readYaml text: harnessTriggerPayload
                                harnessPayload.parameters.build_number = "${env.BUILD_NUMBER}"
                                harnessPayload.parameters.app_commit_id = "${env.GIT_COMMIT}"
                                harnessPayload.parameters.deploy_commit_id = "${env.GIT_COMMIT}"
                                harnessPayload.parameters.artifact_base_url = "$NEXUS_REPO_BASE_URL_ARTIFACTS/$JOB_NAME/$BUILD_NUMBER"
                                writeJSON file: 'harness-payload.json', json: harnessPayload

                                sh 'echo About to trigger harness...'
                                sh 'cat harness-payload.json'
                                sh "curl --silent --show-error --include --fail -X POST -H 'content-type: application/json' --url $HARNESS_WEBHOOK_URL -d '@harness-payload.json'"
                            }
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        sh "rm -f harness-payload.json"
                        setBuildDetails(env.BUILD_NUMBER, env.GIT_COMMIT, 'DEFAULT')
                    }
                }
            }
        }
    }
}
