apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  # unique name per namespace for the template
  name: do-goldenpath-spring-boot-rest-api-template
  # title of the template
  title: Golden Path Spring Boot REST API Template
  # a description of the template
  description: Build a Golden Path RESTful API with Spring Boot
  # some tags to display in the frontend
  tags:
    - api
    - goldenpath
    - java
    - rest
    - template-2022-05-09
spec:
  owner: devops
  type: microservice
  # if the template is not in the current directory where this definition is kept then specify

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Choose Bitbucket Project
      required:
        - org
        - project
      properties:
        org:
          title: Organization
          type: string
          description: Bitbucket organization workspace
          oneOf:
            - const: "twgnz"
              title: "TWGNZ - The Warehouse Group"
        project:
          title: Project
          type: string
          description: Bitbucket project name
          ui:autofocus: true
          oneOf:
            - const: "AI"
              title: "AI - Analytics and Insights"
            - const: "ARC"
              title: "ARC - Architecture Team"
            - const: "B2B"
              title: "B2B - Salesforce B2B project"
            - const: "DATA"
              title: "DATA - Data Structure and Information"
            - const: "DE"
              title: "DE - Salesforce Commerce Cloud (Demandware)"
            - const: "DO"
              title: "DO - Devops"
            - const: "ERPFI"
              title: "ERPFI - Enterprise Resource Planning Financials"
            - const: "ESB"
              title: "ESB - Enterprise Service Bus"
            - const: "FF"
              title: "FF - Fulfillment"
            - const: "FIN"
              title: "FIN - Oracle Financials"
            - const: "GBS"
              title: "GBS - Group Booking System"
            - const: "GEP"
              title: "GEP - Salesforce Group eCommerce Platform"
            - const: "GOMS"
              title: "GOMS - Group Order Management System"
            - const: "HACK"
              title: "HACK - Hackathon"
            - const: "IHUB"
              title: "IHUB - Integration Hub"
            - const: "IN"
              title: "IN - In-house apps"
            - const: "INTEG"
              title: "INTEG - Integration"
            - const: "IS"
              title: "IS - Infrastructure"
            - const: "ISOC"
              title: "ISOC - IS Operations cloud Squad"
            - const: "LOGS"
              title: "LOGS - Logistics"
            - const: "LOYAL"
              title: "LOYAL - Loyalty"
            - const: "LPA"
              title: "LPA - Loyalty, Payment and Advisory"
            - const: "MDM"
              title: "MDM - Master Data Management"
            - const: "MERCH"
              title: "MERCH - Merch"
            - const: "MOB"
              title: "MOB - TWL & NL App"
            - const: "PRISM"
              title: "PRISM - Noel Leeming Prism Team"
            - const: "QA"
              title: "QA"
            - const: "SFSC"
              title: "SFSC - Salesforce Service Cloud"
            - const: "SS"
              title: "SS - Store Services"
            - const: "THEM"
              title: "The Market"
            - const: "WMS"
              title: "WMS"
    - title: Provide Component Details
      required:
        - name
        - description
        - created_by
      properties:
        name:
          title: Unique name of the component
          type: string
          ui:field: ComponentDetailsNameExtension
          ui:autofocus: true
        description:
          title: Description for the component
          type: string
        created_by:
          title: Created by
          type: string
          ui:field: LoggedInUserIdExtension

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    # This step will pre-append the project to the project name if it is not specified.
    # from this point onwards, all places needing to use the component name should be
    # using ${{ steps["prepend-project"].output.repoName }} instead of ${{ parameters.name }}
    - id: prepend-project
      name: "Prepend Project Key"
      action: prefix-repo-name:twgnz-custom
      input:
        project: ${{ parameters.project }}
        repo: ${{ parameters.name }}

    - id: fetch-base
      name: "Fetch Base"
      action: fetch:cookiecutter
      input:
        url: ./template
        copyWithoutRender:
          - '*.tpl.md'
        values:
          component_id: ${{ steps["prepend-project"].output.repoName }}
          organization_id: ${{ parameters.org }}
          project: ${{ parameters.project }}
          description: ${{ parameters.description }}
          created_by: ${{ parameters.created_by }}
          prefix: '{{ cookiecutter.project|lower }}'
          owner: '{{ cookiecutter.project|lower }}-team'
          artifact_id: '{{ cookiecutter.component_id }}'
          java_package_name: '{{ cookiecutter.component_id|replace("-", "") }}'

    - id: publish
      name: "Publish"
      action: publish:bitbucket:twgnz-custom
      input:
        allowedHosts: ['bitbucket.org']
        description: This is ${{ steps["prepend-project"].output.repoName }}
        org: ${{ parameters.org }}
        project: ${{ parameters.project }}
        repo: ${{ steps["prepend-project"].output.repoName }}

    # This step set up the branch restrictions and merge rules for master branch
    - id: bitbucket-branch-restrictions
      name: "BitBucket Branch Restrictions"
      action: publish:bitbucket-branch-restrictions:twgnz-custom
      input:
        org: ${{ parameters.org }}
        repo: ${{ steps["prepend-project"].output.repoName }}

    # This step set up the webhook required for jenkins to be triggered on
    # code push in bitbucket
    - id: bitbucket-webhooks
      name: "BitBucket Webhooks"
      action: publish:bitbucket-webhooks:twgnz-custom
      input:
        org: ${{ parameters.org }}
        repo: ${{ steps["prepend-project"].output.repoName }}

    - id: sonarcloud
      name: "SonarCloud Code Analysis"
      action: publish:sonarcloud:twgnz-custom
      input:
        org: ${{ parameters.org }}
        repo: ${{ steps["prepend-project"].output.repoName }}

    - id: jenkins
      name: "Pipeline: Jenkins"
      action: publish:jenkins:twgnz-custom
      input:
        project: ${{ parameters.project }}
        repo: ${{ steps["prepend-project"].output.repoName }}

    - id: jenkins-smoketest
      name: "Pipeline: Jenkins Smoke Test"
      action: publish:jenkins-smoketest:twgnz-custom
      input:
        project: ${{ parameters.project }}
        repo: ${{ steps["prepend-project"].output.repoName }}

    - id: harness-service
      name: "Pipeline: Harness - Service Creation"
      action: harness:service-creation:twgnz-custom
      input:
        name: ${{ steps["prepend-project"].output.repoName }}
        description: ${{ parameters.description }}
        productName: ${{ parameters.project }}

    # This step sets up the user group permissions to point to the newly
    # created service. The group is derived from the project selected.
    - id: harness-service-permissions
      name: "Pipeline: Harness - Service Permissions"
      action: harness:service-permissions:twgnz-custom
      input:
        name: ${{ steps["prepend-project"].output.repoName }}
        project: ${{ parameters.project }}

    - id: servicenow
      name: "ServiceNow Service creation"
      action: servicenow:twgnz-custom
      input:
        project: ${{ parameters.project }}
        name: ${{ steps["prepend-project"].output.repoName }}
        description: ${{ parameters.description }}

    - id: register
      name: "Register"
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps["publish"].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: ${{ steps["publish"].output.remoteUrl }}
    entityRef: ${{ steps["register"].output.entityRef }}
