apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  # unique name per namespace for the template
  name: do-goldenpath-spring-boot-rest-api-template
  # title of the template
  title: Golden Path Spring Boot REST API Template
  # a description of the template
  description: Build a Golden Path RESTful API with Spring Boot
  # some tags to display in the frontend
  tags:
    - api
    - goldenpath
    - java
    - rest
spec:
  owner: devops
  type: service
  # if the template is not in the current directory where this definition is kept then specify

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Choose Bitbucket Project
      required:
        - org
        - project
      properties:
        org:
          title: Organization
          type: string
        project:
          title: Project
          type: string
          description: Bitbucket project name
          ui:autofocus: true
          oneOf:
            - const: "AI"
              title: "AI - Analytics and Insights"
            - const: "B2B"
              title: "B2B - Salesforce B2B project"
            - const: "DE"
              title: "DE - Salesforce Commerce Cloud (Demandware)"
            - const: "DO"
              title: "DO - Devops"
            - const: "ESB"
              title: "ESB - Enterprise Service Bus"
            - const: "FF"
              title: "FF - Fulfillment"
            - const: "GEP"
              title: "GEP - Salesforce Group eCommerce Platform"
            - const: "IHUB"
              title: "IHUB - Integration Hub"
            - const: "IN"
              title: "IN - In-house apps"
            - const: "INTEG"
              title: "INTEG - Integration"
            - const: "IS"
              title: "IS - Infrastructure"
            - const: "ISOC"
              title: "ISOC - IS Operations cloud Squad"
            - const: "LOYAL"
              title: "LOYAL - Loyalty"
            - const: "MDM"
              title: "MDM - Master Data Management"
            - const: "MER"
              title: "MER - Merch"
            - const: "MOB"
              title: "MOB - TWL & NL App"
            - const: "QA"
              title: "QA"
            - const: "SS"
              title: "SS - Store Services"
            - const: "WMS"
              title: "WMS"
    - title: Provide Component Details
      required:
        - name
        - description
      properties:
        name:
          title: Unique name of the component
          type: string
        description:
          title: Description for the component
          type: string

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:cookiecutter
      input:
        url: ./template
        values:
          component_id: '{{ parameters.name }}'
          owner: '{{ parameters.org }}'
          # use the \ to escape the cookiecutter expressions as the conflict with handlebar expressions
          artifact_id: '\{{ cookiecutter.component_id }}'
          java_package_name: '\{{ cookiecutter.component_id|replace("-", "") }}'
          description: 'We promise to update this description \{{cookiecutter.owner}}'
          http_port: 8080

    - id: publish
      name: Publish
      action: publish:bitbucket:twgnz-custom
      input:
        allowedHosts: ['bitbucket.org']
        description: 'This is {{ parameters.name }}'
        org: '{{ parameters.org }}'
        project: '{{ parameters.project }}'
        repo: '{{ parameters.name }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: '{{ steps.publish.output.remoteUrl }}'
    entityRef: '{{ steps.register.output.entityRef }}'
